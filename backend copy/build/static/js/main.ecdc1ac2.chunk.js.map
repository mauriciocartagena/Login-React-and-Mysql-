{"version":3,"sources":["stores/UserStore.js","InputField.js","SubmitButton.js","LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","InputField","className","type","props","placeholder","value","onChange","e","target","React","Component","SubmitButton","disabled","onClick","text","LoginForm","state","password","buttonDisabled","property","val","trim","length","setState","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","resetForm","alert","msg","console","log","setInputValue","doLogin","App","doLogout","observer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ecdc1ac2.chunk.js","sourcesContent":["import {extendObservable} from 'mobx'\n\n\n// UserStore\n\nclass UserStore{\n    constructor(){\n        extendObservable(this,{\n\n            loading:true,\n            isLoggedIn:false,\n            username:''\n        })\n    }\n}\n\nexport default new UserStore();","import React from 'react';\nclass InputField extends React.Component{\n  render(){\n    return (\n      <div className=\"inputField\">\n\n        <input\n        \n          className='input'\n          type={this.props.type}\n          placeholder={this.props.placeholder}\n          value={this.props.value}\n          onChange={(e)=>this.props.onChange(e.target.value)}\n        \n        >\n        </input>\n      </div>\n    );\n  }\n \n}\n\nexport default InputField;\n","import React from 'react';\nclass SubmitButton extends React.Component{\n  render(){\n    return (\n      <div className=\"submitButton\">\n      <button\n            className='btn'\n            disabled={this.props.disabled}\n            onClick={()=>this.props.onClick( )}\n        >\n          {this.props.text}\n        </button>\n\n      </div>\n    );\n  }\n \n}\n\nexport default SubmitButton;\n","import React          from 'react';\nimport InputField     from './InputField';\nimport SubmitButton   from './SubmitButton';\nimport UserStore      from './stores/UserStore';\n\nclass LoginForm extends React.Component{\n  \n  constructor(props){\n    super(props);\n    this.state={\n        username:'',\n        password:'',\n        buttonDisabled:false\n    }\n  }\n  //Ingresar solo 12 caracteres\n  setInputValue(property,val){\n    val=val.trim();\n    if (val.length>12) {\n      return;\n    }\n    this.setState({\n      [property]:val\n    })\n  }\n  resetForm(){\n    this.setState({\n      username:'',\n      password:'',\n      buttonDisabled:false\n\n    });\n  }\n  async doLogin(){\n    if (!this.state.username) {\n      return;\n    }\n    if (!this.state.password) {\n      return;\n    }\n    this.setState({\n      buttonDisabled:true\n    })\n    try{\n      let res = await fetch('/login',{\n        method:'post',\n        headers:{\n          'Accept' :'application/json',\n          'Content-Type':'application/json'\n        },\n        body:JSON.stringify({\n            username:this.state.username,\n            password:this.state.password\n        })\n      });\n      let result = await res.json();\n      if (result && result.success) {\n            UserStore.isLoggedIn=true;\n            UserStore.username=result.username;\n      }\n      else if(result && result.success ===false){\n        this.resetForm();\n        alert(result.msg);\n      }\n\n    }\n    catch(e){\n        console.log(e);{\n        this.resetForm();\n      }\n\n    }\n  }\n  \n  render(){\n    return (\n      <div className=\"loginForm\">\n       \n        Log In\n        <InputField\n            type='text'\n            placeholder='Username'\n            value={this.state.username? this.state.username:''}\n            onChange={ (val) => this.setInputValue('username',val)}\n        >\n        </InputField>\n        <InputField\n            type='password'\n            placeholder='password'\n            value={this.state.password? this.state.password:''}\n            onChange={ (val) => this.setInputValue('password',val)}\n        >\n        </InputField>\n        <SubmitButton\n          text='login'\n          disabled={this.state.buttonDisabled}\n          onClick={()=>this.doLogin()}\n        \n        >\n\n        </SubmitButton>\n\n      </div>\n    );\n  }\n \n}\n\nexport default LoginForm;\n","import React        from 'react';\nimport { observer } from 'mobx-react';\nimport UserStore    from './stores/UserStore';\nimport LoginForm    from './LoginForm';\nimport SubmitButton from './SubmitButton';\nimport './App.css';\n\nclass App extends React.Component{\n  async componentDidMount(){\n    try{\n      let res=await fetch('/isLoggedIn',{\n        method: 'post',\n        headers:{\n          'Accept':'application/json',\n          'Content-Type':'application/json'\n         } \n      });\n\n      //Espera que termine de emtablar los datos \n      let result = await res.json();\n\n      if (result && result.success) {\n\n          UserStore.loading=false;\n          UserStore.isLoggedIn=true;\n          UserStore.username=result.username;\n\n      }else{\n\n          UserStore.loading=false;\n          UserStore.isLoggedIn=false;\n\n      }\n    }\n    catch(e){\n        UserStore.loading=false;\n        UserStore.isLoggedIn=false;\n    }\n\n  }\n  async doLogout(){\n\n    try{\n\n        let res = await fetch('/logout',{\n          method: 'post',\n          headers:{\n            'Accept':'application/json',\n            'Content-Type':'application/json'\n          } \n      });\n\n      //Espera que termine de emtablar los datos \n      let result = await res.json();\n      if (result && result.success) {\n        UserStore.isLoggedIn=false;\n        UserStore.username='';\n      }\n    }\n    catch(e){\n      console.log(e);\n      console.log(\"Error\");\n    }\n       \n\n  }\n  render(){\n    if(UserStore.loading){\n        return(\n          <div className=\"App\">\n              <div className=\"container\">\n                    Loading,please wait...                \n              </div>\n          </div>\n        );\n    }\n    else{\n      if (UserStore.isLoggedIn) {\n        return(\n          <div className=\"App\">\n              <div className=\"container\">\n                  Welcome {UserStore.username}\n                  <SubmitButton\n                     text='Salir'\n                     disabled={false}\n                     onClick={()=>this.doLogout()}       \n                  ></SubmitButton>\n              </div>\n          </div>\n        );\n      }\n    }\n    return (\n      <div className=\"App\">\n           <div className=\"container\">\n                   <LoginForm>\n\n                   </LoginForm>\n           </div>\n      </div>\n    );\n  }\n \n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}